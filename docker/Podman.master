#--- Build from Jupyter-provided Minimal Install ---#
#  export IMG_NM=sds:2025-arm && podman build --arch arm64 -t jreades/$IMG_NM --compress  -f ./docker/Podman.master --format docker .
#  export IMG_NM=sds:2025-amd && podman build --arch amd64 -t jreades/$IMG_NM --compress  -f ./docker/Podman.master --format docker .
#  podman push <IMAGE ID> docker://docker.io/jreades/sds:2025-<ARCH>
#
# podman run --rm -d --name sds -p 8888:8888 \
#   -v "$(pwd):/home/jovyan/work" \
#   jreades/sds:2025-arm start.sh jupyter lab \
#   --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
FROM quay.io/jupyter/minimal-notebook:notebook-7.4.1
# Would like to aim for something slimmer but... 
#FROM --platform=linux/amd64 continuumio/miniconda3:23.10.0-1
LABEL maintainer="Jon Reades <j.reades@ucl.ac.uk>"

ARG TARGETPLATFORM

ENV yaml_nm 'conda.podman.yml'
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

#--- Avoid weird build issue ---#
RUN mkdir -p /home/${NB_USER}/.cache/conda

#--- Base ---#
USER root
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        # Seem to need gcc and g++ for ARM builds now b/c of spacy
        gcc \ 
        g++ \ 
        #texlive \
        #pandoc \
        #pandoc-citeproc \
        #curl \
        #musl-dev \ 
        # Not in miniconda
        # unzip \ 
        librsvg2-bin \
        fontconfig \
        texlive-fonts-recommended \
        lmodern \
        gdebi-core
    #&& apt-cache policy musl-dev 
# Ideally we could skip the apt-get update
# if we knew where musl-dev is available to 
# download.

#--- Install Quarto ---#
# Use the target platform to specify the Quarto version
RUN if [[ "$TARGETPLATFORM" = */arm64 ]]; then \
    curl -LO https://quarto.org/download/latest/quarto-linux-arm64.deb && \
        gdebi --non-interactive quarto-linux-arm64.deb && \
        rm quarto-linux-arm64.deb; \
  else \
    curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb && \
        gdebi --non-interactive quarto-linux-amd64.deb && \
        rm quarto-linux-amd64.deb; \
  fi

# Tidy up
RUN rm -rf /var/lib/apt/lists/*

#--- Python ---#
USER $NB_UID
ENV env_nm 'base'
ENV env_path '/opt/conda/'

ADD ../conda/$yaml_nm ./

RUN mamba env update -n base --file $yaml_nm \
    && mamba clean --all --yes --force-pkgs-dirs \ 
    && rm $yaml_nm \
    && conda clean --all --yes --force-pkgs-dirs \
    && find /opt/conda/ -follow -type f -name '*.a' -delete \
    && find /opt/conda/ -follow -type f -name '*.pyc' -delete \
    && find /opt/conda/ -follow -type f -name '*.js.map' -delete \
    #&& find "${env_path}/lib/python*/site-packages/bokeh/server/static" \
    #   -follow -type f -name '*.js' ! -name '*.min.js' -delete \
    && pip cache purge 

#--- Install some fonts ---#
#####################
# Long term we probably want to install our own tinytex:
#   See: https://yihui.org/tinytex/#installation
#   And: https://github.com/rstudio/tinytex
#   And: https://github.com/rstudio/tinytex/issues/426
#   Since currently quarto install tinytex isn't supported.
#
#####################
# To use web fonts: https://fonts.google.com/knowledge/using_type/using_web_fonts
# To load web fonts: https://fonts.google.com/knowledge/using_type/using_web_fonts_from_a_font_delivery_service
#
#####################
# To get FontAwesome5 PDF support:
# 1. Unpack the fontawesome.tar.gz folder anywhere you need PDFs (e.g the practicals directory).
#    tar -xvf ./fontsrc/fontawesome.tar.gz -C ./work/practicals/
# 2. Adding the following to your _metadata.yml file (directory level):
# format:
#   pdf:
#     include-in-header:
#       text: |
#         \usepackage[fixed]{fontawesome5}
#
#####################
USER $NB_UID

COPY ../fonts ./fontsrc
ENV FONTCONF="/home/${NB_USER}/.config/fontconfig/conf.d"
ENV FONTPATH="/home/${NB_USER}/fonts"

RUN tlmgr init-usertree \ 
    && mkdir -p ${FONTCONF} \ 
    && mkdir -p ${FONTPATH} \
    && cp ./fontsrc/?-fonts.conf ${FONTCONF}/ \
    && for i in `ls ./fontsrc/*.zip`; \
        do \
            unzip -o -d ${FONTPATH} "$i" -x __MACOSX; \
        done \
    && fc-cache -f -v \
    && rm -rf ./fontsrc
    #&& rm -f ~/.cache/matplotlib/fontlist*.json || true \
    #&& python -c "from matplotlib.font_manager import findfont; findfont('sans', rebuild_if_missing=True)"

# This bloats the Docker image but not massively
# Should rebuild the font manager and allow us to access
# the fonts we've just added in Matplotlib... *should*
RUN source activate ${env_nm} \
    && mkdir -p "/home/$NB_USER/.cache/black/$(black --version | head -n 1 | cut -d ' ' -f 2)" \
    && black --code "print ( 'hello, world' )" \
    && MPLBACKEND=Agg python -c "import matplotlib.pyplot" \
    && python -c "import matplotlib.font_manager;" \
    && python -c "import logging; logging.basicConfig(level='INFO'); import black" \
    && conda deactivate


#--- Tidy and fix permissions ---#
USER root

# Disable message
RUN jupyter labextension disable "@jupyterlab/apputils-extension:announcements" \
    # Clean up
    && jupyter lab clean -y \
    && conda clean --all -f -y \
    && rm -rf $CONDA_DIR/share/jupyter/lab/staging \
    && rm -rf /home/$NB_USER/.node-gyp/* \
    && rm -rf /home/$NB_USER/.local/* \
    && rm -rf /home/$NB_USER/.cache/rosetta \
    && rm -rf /home/$NB_USER/.cache/yarn \ 
    && rm -rf /home/$NB_USER/.cache/pip 
    # Fix permissions
    #&& fix-permissions $CONDA_DIR \
    #&& fix-permissions /home/$NB_USER

#--- Final steps
USER $NB_UID

# USER $NB_UID

#--- Preload the NLTK/Spacy libs and code formatter ---#
# RUN source activate $env_nm \
#    #&& jupyter kernelspec install $env_path --user --replace --name=$env_nm --display-name="Python (${env_nm})" \
#    && ipython kernel install --user --name $env_nm --display-name="Python (${env_nm})" \
#    && conda deactivate \
#    && if [ "$env_nm" != "base" ]; then jupyter kernelspec remove -y python3; fi

# RUN jupyter lab --generate-config \
#    && echo "c.MultiKernelManager.default_kernel_name='$env_nm'" >> \
#       /home/$NB_USER/.jupyter/jupyter_lab_config.py \
#    # https://github.com/jupyter/notebook/issues/3674#issuecomment-397212982
#    && echo "c.KernelSpecManager.allowed_kernelspecs = {'$env_nm'}" >> \
#        /home/$NB_USER/.jupyter/jupyter_lab_config.py \
#    && echo "c.KernelSpecManager.ensure_native_kernel = True" >> \
#         /home/$NB_USER/.jupyter/jupyter_lab_config.py \
#    && echo "conda activate $env_nm" >> /home/$NB_USER/.bashrc

#--- Make Proj4 Easy to Find ---#
# Change depending on whether using base environment

# ENV PROJ_LIB=$env_path/share/proj/
# ENV GENSIM_DATA_DIR=/home/$NB_USER/work/gensim-data
# ENV SPACY_DATA_DIR=/home/$NB_USER/work/spacy-data
# ENV XDG_CACHE_HOME=/home/$NB_USER/.cache/

# RUN echo "export PATH=$env_path/bin/:$PATH" >> ~/.bashrc 
# RUN echo "export PROJ_LIB=$PROJ_LIB" >> ~/.bashrc
# RUN echo "export GENSIM_DATA_DIR=$GENSIM_DATA_DIR # python -m gensim.downloader --download <dataname>" >> ~/.bashrc 
# RUN echo "export SPACY_DATA_DIR=$SPACY_DATA_DIR # spacy.load('/path/to/en_core_web_sm')" >> ~/.bashrc 
# RUN echo "export XDG_CACHE_HOME=$XDG_CACHE_HOME" >> ~/.bashrc

#--- Configure startup params ---#
# Switch back to user to avoid accidental container runs as root
USER $NB_UID

# VSCode Extension Folder (optional usage)
RUN mkdir -p /home/$NB_USER/.vscode-server/extensions \
            /home/$NB_USER/.vscode-server-insiders/extensions \
    && chown -R $NB_UID \ 
            /home/$NB_USER/.vscode-server \
            /home/$NB_USER/.vscode-server-insiders